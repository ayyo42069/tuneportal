name: Push Files to FTP
on:
  workflow_dispatch:  # Allows manual execution
  push:
    branches:
      - master  # Adjust if using another branch
    paths-ignore:
      - "README.md"
      - ".github/**"
      - "*.md"
jobs:
  push-ftp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history

      - name: Set up deployment state tracking
        id: deployment-state
        run: |
          # Create a directory to store deployment state
          mkdir -p .deployment
          
          # Create or read the last deployment commit hash
          if [ -f ".deployment/last_deployed_commit" ]; then
            LAST_DEPLOYED_COMMIT=$(cat .deployment/last_deployed_commit)
          else
            # If this is the first deployment, use the parent of the first commit
            LAST_DEPLOYED_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "LAST_DEPLOYED_COMMIT=$LAST_DEPLOYED_COMMIT" >> $GITHUB_ENV
          
          # Get list of changed files since last deployment
          git diff --name-only $LAST_DEPLOYED_COMMIT HEAD > .deployment/changed_files.txt
          
          # Count changed files
          CHANGED_FILES_COUNT=$(cat .deployment/changed_files.txt | wc -l)
          echo "CHANGED_FILES_COUNT=$CHANGED_FILES_COUNT" >> $GITHUB_ENV
          
          # Store current commit as the new last deployed commit
          git rev-parse HEAD > .deployment/last_deployed_commit
      
      - name: Install lftp
        run: sudo apt-get update && sudo apt-get install -y lftp
      
      - name: Upload only changed files to FTP
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          REMOTE_PATH: "/"  # Change this if needed
        run: |
          # Skip FTP upload if no files changed (except for manual trigger)
          if [ "${{ github.event_name }}" != "workflow_dispatch" ] && [ "$CHANGED_FILES_COUNT" -eq "0" ]; then
            echo "No files changed since last deployment, skipping FTP upload"
            exit 0
          fi
          
          # Set options to continue on error to prevent workflow failure
          set +e
          
          # Log start time and changed files for debugging
          echo "Starting FTP upload at $(date)"
          echo "Uploading $CHANGED_FILES_COUNT changed files since last deployment"
          cat .deployment/changed_files.txt
          
          # Create script for uploading only changed files
          echo "open -u \"$FTP_USERNAME\",\"$FTP_PASSWORD\" ftp://$FTP_SERVER" > ftp_script.txt
          echo "set ftp:ssl-allow true" >> ftp_script.txt
          echo "set ssl:verify-certificate no" >> ftp_script.txt
          echo "set net:max-retries 5" >> ftp_script.txt
          echo "set net:timeout 15" >> ftp_script.txt
          echo "set net:reconnect-interval-base 5" >> ftp_script.txt
          echo "set net:reconnect-interval-multiplier 1" >> ftp_script.txt
          
          # Process each changed file individually
          cat .deployment/changed_files.txt | grep -v -E '(^\.git/|^vendor/|^\.github/|^node_modules/|\.DS_Store$|\.log$|^\.env|\.tmp$|\.bak$)' | while read file; do
            if [ -f "$file" ]; then
              # Create directory structure if needed
              dir=$(dirname "$file")
              if [ "$dir" != "." ]; then
                echo "mkdir -p \"$REMOTE_PATH/$dir\"" >> ftp_script.txt
              fi
              # Upload the file
              echo "put \"$file\" \"$REMOTE_PATH/$file\"" >> ftp_script.txt
            fi
          done
          
          echo "bye" >> ftp_script.txt
          
          # Execute the FTP script
          lftp -f ftp_script.txt
          
          echo "FTP upload completed at $(date)"
          
          # Save the deployment state to GitHub artifacts
          if [ "${{ github.event_name }}" == "push" ]; then
            # This ensures we track successful deployments only on regular pushes
            mkdir -p deployment-state
            cp .deployment/last_deployed_commit deployment-state/
          fi
          
          # Always exit with success code
          exit 0
      
      - name: Upload deployment state
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: deployment-state
          path: deployment-state/
          retention-days: 1
      
      - name: Download previous deployment state
        if: github.event_name == 'push'
        uses: actions/download-artifact@v3
        with:
          name: deployment-state
          path: .deployment/
